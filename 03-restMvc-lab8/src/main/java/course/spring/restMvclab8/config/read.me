# Timely update UM 4.x status in Usage Insight

## Requirements

Customers who have deployed UM 4.1 complain that they cannot tell if the UM is connected to the cloud because the UM status in Usage Insight remains red.

See Jira epic https://jira.eng.vmware.com/browse/VUM-6210

## Architecture

<img src="architecture.png" width="900">

## Design

1. Expose `touchUsageMeter` GRPC API in [Decryption Service](https://gitlab.eng.vmware.com/vcan/usage-meter-services/blob/master/services/decryption-service/src/main/java/com/vmware/vcpp/decryption/application/DecryptionInternalServiceImpl.java) to update the last seen timestamp of a UM.
1. Call `touchUsageMeter` in the Event Gateway [Registration Controller](https://gitlab.eng.vmware.com/core-build/usage-meter-cloud/blob/master/services/event-gateway/src/main/java/com/vmware/um/rawstorage/resource/RegistrationResource.java), pass the UM UUID as a parameter.
1. Use the same mechanism of calling between namespaces as the mechanism used by the Event Gateway to call Metadata Service.

## Testing

The implementation shall allow up to 10,000 concurent registration calls.

## Considerations

The rule to set a green status of a UM is to have that UM calling home in the last 1 month. For the time being we will not change that behavior for 4.x UM. Exposing detailed UM status about hourly collections is beyond the scope of this feature but is covered in another feature - [vUI Notifications](https://gitlab.eng.vmware.com/lkarg/vui-notifications/). Once we have detailed status, we can remove this feature.

Registration API is called rarely. It is called upon:
* first connection of the UM appliance to the cloud
* every time the user clicks on the Test Connection button
It is not expected to see any backpressure caused by the calls to Decryption Service.

Coupling between components is undesired. Use of message queue is preferred over direct API call. However, Event Gateway and Decryption Service serve similar purpose and may potentially be combined in one service. Thus, the coupling is not that much an issue.

The Decryption Service is undergoing refactoring that will break it down into 3 services - Input Service, Descriptor and Monthly Usage Processor. Monthly Usage Processor is the component that will remain owner of the ‘knownums’ table. Consequently, it is the Monthly Usage Processor that have to expose the same API is the Decryption Service.






